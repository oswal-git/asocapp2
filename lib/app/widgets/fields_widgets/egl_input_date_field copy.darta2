import 'package:flutter/material.dart';
import 'package:get/get.dart';
import 'package:intl/intl.dart';

class EglInputDateField extends StatelessWidget {
  const EglInputDateField({
    super.key,
    required this.dateController,
    required this.onChanged,
    required this.onValidator,
    required this.firstDate,
    required this.lastDate,
    this.labelText = '',
    this.paddingLeft = 20,
    this.paddingRight = 20,
    this.paddingTop = 0,
    this.paddingBottom = 0,
    this.contentPaddingLeft = 6,
    this.contentPaddingRight = 6,
    this.contentPaddingTop = 12,
    this.contentPaddingBottom = 12,
    this.focusNode,
    this.nextFocusNode,
    this.icon,
    this.iconLabel,
    this.ronudIconBorder = false,
    this.readOnly = false,
    this.borderRadius = 30,
    this.borderColor = Colors.redAccent,
    this.enabledBorderWidth = 1,
    this.borderWidth = 1,
    this.borderFocusColor = Colors.redAccent,
    this.focusedBorderWidth = 2,
    this.prefixIconPaddingLeft = 30,
    this.prefixIconPaddingRight = 10,
    this.prefixIconPaddingTop = 0,
    this.prefixIconPaddingBottom = 0,
  });

  final Rx<DateTime> dateController;
  final Rx<DateTime> firstDate;
  final Rx<DateTime> lastDate;

  final ValueChanged<DateTime> onChanged;
//   final VoidCallback onTap;

  final FormFieldValidator<String> onValidator;
  final FocusNode? focusNode;
  final FocusNode? nextFocusNode;
  final IconData? icon;
  final IconData? iconLabel;
  final bool ronudIconBorder;
  final bool readOnly;
  final String labelText;
  final double paddingLeft;
  final double paddingRight;
  final double paddingTop;
  final double paddingBottom;

  final double borderRadius;
  final Color borderColor;
  final double enabledBorderWidth;
  final double borderWidth;
  final Color borderFocusColor;
  final double focusedBorderWidth;
  final double contentPaddingLeft;
  final double contentPaddingRight;
  final double contentPaddingTop;
  final double contentPaddingBottom;
  final double prefixIconPaddingLeft;
  final double prefixIconPaddingRight;
  final double prefixIconPaddingTop;
  final double prefixIconPaddingBottom;

  @override
  Widget build(BuildContext context) {
    return FormField<DateTime>(
      builder: (FormFieldState<DateTime> state) {
        return InputDecorator(
          decoration: InputDecoration(
            label: Row(mainAxisSize: MainAxisSize.min, children: [
              if (iconLabel != null)
                Container(
                  decoration: ronudIconBorder
                      ? BoxDecoration(
                          shape: BoxShape.circle,
                          border: Border.all(
                            color: Colors.black,
                            width: 2,
                          ),
                        )
                      : null,
                  child: Icon(
                    iconLabel,
                    size: ronudIconBorder ? 16.0 : 22.0,
                    color: Colors.black,
                  ),
                ),
              Padding(
                padding: EdgeInsets.only(
                  left: iconLabel == null ? 0.0 : 8.0,
                ),
                child: Text(
                  labelText,
                  style: const TextStyle(
                    fontSize: 18.0,
                    fontWeight: FontWeight.w600,
                  ),
                ),
              )
            ]),
            contentPadding: EdgeInsets.only(
              left: contentPaddingLeft,
              right: contentPaddingRight,
              top: contentPaddingTop,
              bottom: contentPaddingBottom,
            ),
            enabledBorder: OutlineInputBorder(
              borderRadius: BorderRadius.circular(borderRadius),
              borderSide: BorderSide(
                color: borderColor,
                width: enabledBorderWidth,
              ),
            ),
            border: OutlineInputBorder(
              borderRadius: BorderRadius.circular(borderRadius),
              borderSide: BorderSide(
                color: borderColor,
                width: borderWidth,
              ),
            ),
            focusedBorder: OutlineInputBorder(
              borderSide: BorderSide(
                color: borderFocusColor,
                width: focusedBorderWidth,
              ),
              borderRadius: BorderRadius.circular(borderRadius),
            ),
            helperText: '',
            helperMaxLines: 2,
            prefixIcon: icon == null
                ? null
                : IconButton(
                    onPressed: () {},
                    icon: Icon(
                      icon,
                      color: Colors.blue,
                    )), // adjust size as needed
            errorMaxLines: 2,
            errorStyle: const TextStyle(
              height: 1,
              fontSize: 11,
            ),
          ),
          child: InkWell(
            onTap: () async {
              DateTime? pickedDate = await showDatePicker(
                context: context,
                initialDate: dateController.value.isAtSameMomentAs(DateTime(4000)) ? firstDate.value : dateController.value,
                firstDate: firstDate.value,
                lastDate: lastDate.value,
                selectableDayPredicate: (value) {
                  if (value.toString() == '') {
                    return true;
                  }
                  return true;
                },
                onDatePickerModeChange: (value) {
                  if (value == DatePickerEntryMode.input) {
                    return;
                  }
                },
              );

              if (pickedDate != null && pickedDate != dateController.value) {
                dateController.value = pickedDate;
                state.didChange(pickedDate);
                onChanged(dateController.value);
              }
            },
            child: Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                Text(
                  dateController.value.isAtSameMomentAs(DateTime(4000)) ? 'dd/mm/aaaa' : DateFormat('dd/MM/yyyy').format(dateController.value),
                  //   'dd/mm/aaaa',
                  //   DateFormat('dd/MM/yyyy').format(dateController.value),
                  //   '${dateController.value.toString()} - ${dateController.value.isAtSameMomentAs(DateTime(9000)).toString()}',
                  style: const TextStyle(fontSize: 14),
                ),
                const Icon(Icons.calendar_today),
              ],
            ),
          ),
        );
      },
      validator: (value) {
        if (value == null) {
          return 'mSelectDate'.tr;
        }
        return null;
      },
    );
  }
}
